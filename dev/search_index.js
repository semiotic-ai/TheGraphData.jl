var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = TheGraphData","category":"page"},{"location":"#TheGraphData","page":"Home","title":"TheGraphData","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for TheGraphData.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [TheGraphData]","category":"page"},{"location":"#TheGraphData.client!-Tuple{AbstractString}","page":"Home","title":"TheGraphData.client!","text":"client!(u::AbstractString)\nclient!(c::GraphQLClient.Client)\n\nSet the provided url (u) or client (c) as the new client.\n\n\n\n\n\n","category":"method"},{"location":"#TheGraphData.query-Union{Tuple{S}, Tuple{AbstractString, Dict, AbstractVector{S}}} where S<:AbstractString","page":"Home","title":"TheGraphData.query","text":"query(v::AbstractString, a::Dict, f::AbstractVector{S}) where {S<:AbstractString}\n\nQuery the client for value v with arguments a and fields f. By default, the client is the gateway.\n\n\n\n\n\n","category":"method"},{"location":"#TheGraphData.table-Union{Tuple{AbstractVector{D}}, Tuple{D}} where D<:Dict","page":"Home","title":"TheGraphData.table","text":"table(data::AbstractVector{D}) where {D<:Dict}\n\nConvert the queried data to a TypedTable.\n\n\n\n\n\n","category":"method"},{"location":"#TheGraphData.unnestdict-Tuple{Dict}","page":"Home","title":"TheGraphData.unnestdict","text":"unnestdict(d::Dict)\n\nUnnest a dictionary d. The innermost key is preserved.\n\nNote that this function assumes no duplicate keys. Else, the function may behave in unexpected ways.\n\nExample\n\njulia> d = Dict(\"a\" => 1, \"b\" => Dict(\"c\" => Dict(\"d\" => 4)))\njulia> unnestdict(d)\nDict(\"a\" => 1, \"d\" => 4)\n\n\n\n\n\n","category":"method"}]
}
